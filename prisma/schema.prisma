generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Order {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // --- NUEVOS CAMPOS ---
  side                 String?  // "BUY" | "SELL"
  paymentChannelKey    String?  // referencia al m√©todo (PaymentChannel.key)
  appliedCommissionPct Float?   // % usado en ese momento
  exchangeRateUsed     Float?   // tasa congelada usada para esta orden

  platform  String // Ej: PayPal  (‚ö†Ô∏è en el futuro podr√≠as migrar todo a paymentChannelKey)
  to        String // Ej: USDT - TRC20
  amount    Float
  finalUsd  Float
  finalUsdt Float
  finalCommission Float @default(0)

  paypalEmail String
  wallet      String

  status    OrderStatus @default(PENDING)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  messages Message[] @relation("OrderMessages")
  paypalInvoiceId String?
  realProfit Float?
}


model Message {
  id        String    @id @default(cuid())
  orderId   String
  order     Order     @relation("OrderMessages", fields: [orderId], references: [id], onDelete: Cascade)

  senderId  String
  sender    User      @relation("UserMessages", fields: [senderId], references: [id], onDelete: Cascade)

  content   String?   @db.Text // <-- CAMBIADO: '?' lo hace opcional. @db.Text para mensajes largos
  imageUrl  String?   @db.Text // <-- ¬°NUEVO CAMPO!: '?' lo hace opcional para im√°genes
  createdAt DateTime  @default(now())
}

model User {
  id              String         @id @default(cuid())
  clerkId         String         @unique
  email           String         @unique
  fullName        String?
  orders          Order[]
  messages        Message[]      @relation("UserMessages")
  verifications   Verification[]
  paymentMethods  PaymentMethod[]
  expoPushToken   String?

  // üëá Campos nuevos para referidos
  referrerId      String?
  referrer        User?          @relation("UserReferrals", fields: [referrerId], references: [id])
  referrals       User[]         @relation("UserReferrals")
  referralEarnings ReferralEarning[]
  referredUsers     ReferralEarning[]  @relation("ReferredUsers")
}


model ReferralEarning {
  id             String   @id @default(cuid())
  userId         String   // ‚Üí el que gana la comisi√≥n
  referredUserId String   // ‚Üí el que gener√≥ la orden
  amount         Float    @default(5.0)
  createdAt      DateTime @default(now())

  user           User     @relation(fields: [userId], references: [id])
  referredUser   User     @relation("ReferredUsers", fields: [referredUserId], references: [id])
}


enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
}


model ExchangeRate {
  id        String   @id @default(cuid())
  currency  String   @unique // Ej: "BS", "USD", "ARS", etc.
  rate      Float
  updatedAt DateTime @updatedAt
}


model Verification {
  id          String   @id @default(cuid())
  userId      String   @unique
  documentUrl String
  selfieUrl   String
  status      String   @default("PENDING") // PENDING, APPROVED, REJECTED
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model PaymentMethod {
  id        String   @id @default(cuid())
  userId    String
  type      String   // Ej: "PayPal", "PagoMovil", "USDT", "Zelle", etc.
  details   Json     // Objeto din√°mico seg√∫n el tipo
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}


model PaymentChannel {
  id                    String   @id @default(cuid())
  key                   String   @unique     // "PAYPAL", "ZELLE", "ZINLI"...
  label                 String               // Nombre visible: "PayPal"

  // % por lado
  commissionBuyPercent  Float
  commissionSellPercent Float

  // Disponibilidad por lado
  enabledBuy            Boolean  @default(true)
  enabledSell           Boolean  @default(true)

  // Visibilidad y mensajes
  visible               Boolean  @default(true)
  statusTextBuy         String?
  statusTextSell        String?

  // Utilidades
  sortOrder             Int      @default(0)
  archivedAt            DateTime?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

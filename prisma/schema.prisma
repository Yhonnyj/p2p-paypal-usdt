generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UserProfile {
  id               String   @id @default(cuid())
  userId           String   @unique // ID de Clerk
  country          String
  documentType     String
  documentFrontUrl String
  documentBackUrl  String
  selfieUrl        String
  status           String   @default("pending") // Estado del KYC
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model Order {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  platform  String // Ej: PayPal
  to        String // Ej: USDT - TRC20
  amount    Float // Monto enviado por el usuario (USD)
  finalUsd  Float // Monto neto tras comisi√≥n (USD)
  finalUsdt Float // Monto en USDT entregado
  finalCommission Float @default(0)

  paypalEmail String // Correo del cliente
  wallet      String // Wallet USDT o user ID de Binance Pay

  status    OrderStatus @default(PENDING)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  messages Message[] @relation("OrderMessages")
}

model Message {
  id        String    @id @default(cuid())
  orderId   String
  order     Order     @relation("OrderMessages", fields: [orderId], references: [id], onDelete: Cascade)

  senderId  String
  sender    User      @relation("UserMessages", fields: [senderId], references: [id], onDelete: Cascade)

  content   String?   @db.Text // <-- CAMBIADO: '?' lo hace opcional. @db.Text para mensajes largos
  imageUrl  String?   @db.Text // <-- ¬°NUEVO CAMPO!: '?' lo hace opcional para im√°genes
  createdAt DateTime  @default(now())
}

model User {
  id              String         @id @default(cuid())
  clerkId         String         @unique
  email           String         @unique
  fullName        String?
  orders          Order[]
  messages        Message[]      @relation("UserMessages")
  verifications   Verification[]
  paymentMethods  PaymentMethod[]
  expoPushToken   String?

  // üëá Campos nuevos para referidos
  referrerId      String?
  referrer        User?          @relation("UserReferrals", fields: [referrerId], references: [id])
  referrals       User[]         @relation("UserReferrals")
  referralEarnings ReferralEarning[]
  referredUsers     ReferralEarning[]  @relation("ReferredUsers")
}


model ReferralEarning {
  id             String   @id @default(cuid())
  userId         String   // ‚Üí el que gana la comisi√≥n
  referredUserId String   // ‚Üí el que gener√≥ la orden
  amount         Float    @default(5.0)
  createdAt      DateTime @default(now())

  user           User     @relation(fields: [userId], references: [id])
  referredUser   User     @relation("ReferredUsers", fields: [referredUserId], references: [id])
}


enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
}

model AppConfig {
  id         Int      @id @default(1)
  feePercent Float    @default(13.0)
  rate       Float    @default(1.13)
  bsRate     Float    @default(40.0)   // USDT ‚Üí BS ‚úÖ
  updatedAt  DateTime @updatedAt
}

model ExchangeRate {
  id        String   @id @default(cuid())
  currency  String   @unique // Ej: "BS", "USD", "ARS", etc.
  rate      Float
  updatedAt DateTime @updatedAt
}


model Verification {
  id          String   @id @default(cuid())
  userId      String   @unique
  documentUrl String
  selfieUrl   String
  status      String   @default("PENDING") // PENDING, APPROVED, REJECTED
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model PaymentMethod {
  id        String   @id @default(cuid())
  userId    String
  type      String   // Ej: "PayPal", "PagoMovil", "USDT", "Zelle", etc.
  details   Json     // Objeto din√°mico seg√∫n el tipo
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
